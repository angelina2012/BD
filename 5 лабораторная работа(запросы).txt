Вывести только значения полей "gender" у все документов, в которых name=Leia:
1	> db.unicorns.find({name: "Leia"}, {gender: 1})
Использование единицы в качестве параметра {gender: 1} указывает, что запрос должен вернуть только содержание свойства gender
Обратная ситуация: нужно найти все параметры документа, кроме свойства gender.В этом случае в качестве параметра указать 0:
1	> db.unicorns.find({name: "Leia"}, {gender: 0})
-------------------------------------------------
db.unicorns.find({gender:'f'}).sort({name:1});
1-по возрастанию,-1-по убыванию
---------------------------
Но что, если нужно  произвести выборку не сначала, а пропустив какое-то количество документов? 
В этом используется функция skip. Например, пропустить первые три записи:
db.unicorns.find({gender:'f'}).skip(3);
----------------------
db.unicorns.find({gender:'f'}).limit(3);
---------------------------
db.unicorns.findOne({name:'Leia'});
--------------------------------
db.unicorns.find({gender:'f',name:'Leia'});
----------------
db.unicorns.find({gender:'f'});
--------------------------------
db.stats();
------------------
db.unicorns.insert({name: 'Nimue', dob: new Date(1999, 11, 20, 16, 15), loves: ['grape', 'carrot'], weight: 540, gender: 'f'});
---------------------------
Если нужно отсортировать ограниченную коллекцию, то можно воспользоваться параметром $natural. Этот параметр позволяет задать сортировку: документы передаются в том порядке, в каком они были добавлены в коллекцию, либо в обратном порядке.
Например, отобрать последние пять документов:
db.unicorns.find({gender:'f'}).sort({$natural :-1}).limit(3);
-------------------------------------------
Для работы с массивами используется оператор $slice. Он является в некотором роде комбинацией функций limit и skip. 
Оператор $slice принимает два параметра. Первый параметр указывает на общее количество возвращаемых документов. Второй параметр необязательный, но если он используется, тогда первый параметр указывает на смещение относительно начала (как функция skip), а второй - на ограничение количества извлекаемых документов.
db.unicorns.find({name:'Leia'},{loves:{$slice:-1}});
----------------------------------------
db.unicorns.find ({vampires: {$lt : 30}});
$lt-меньше чем
$gt-больше чем
$lte- меньше или равно
$gte-больше или равно
---------------------
Оператор $ne извлекает все документы, не соответствующие некоторому условию
db.unicorns.find ({vampires: {$ne : 2}});
Оператор $in определяет массив возможных выражений и ищет те ключи, значение которых имеется в массиве:
db.unicorns.find ({vampires: {$in : [0,2]}});
Противоположным образом действует оператор $nin: он определяет массив возможных выражений и ищет те ключи, значение которых отсутствует в этом массиве:
db.unicorns.find ({vampires: {$nin : [63,43]}});
db.unicorns.find ({loves: {$all : ['carrot']}});
Оператор $or определяет набор пар ключ-значение, которые должны иметься в документе. И если документ имеет хоть одну такую пару ключ-значение, то он соответствует данному запросу и извлекается из бд:
db.unicorns.find ({$or : [{name: "Leia"}, {vampires: 63}]});
Оператор $exists позволяет извлечь только те документы, в которых определенный ключ присутствует или отсутствует. Например, вернуть все документы, в который есть ключ name:
db.unicorns.find ({name: {$exists:true}});
Оператор $regex задает регулярное выражение, которому должно соответствовать значение поля. Например, пусть поле name обязательно имеет букву "L":
db.unicorns.find ({name: {$regex:"L"}});
db.unicorns.find ({name: {$regex:"ia$"}});---заканчивается на ia